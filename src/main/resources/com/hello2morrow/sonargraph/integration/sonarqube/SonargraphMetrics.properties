#Standard Sonargraph Metrics
#Wed Oct 11 17:49:12 EDT 2023
CoreAcd=ACD|FLOAT|0.0|Infinity|Average component dependency according to John Lakos. Average number of components a component depends on directly and indirectly. This metric can be used to characterize the overall average coupling of internal components.
CoreArtifactCount=Number of Artifacts|INT|NaN|NaN|Number of architecture artifacts in checked files
CoreAverageComplexity=Average Complexity|FLOAT|0.0|Infinity|Weighted average modified extended cyclomatic complexity for fully analyzed code
CoreAverageNesting=Average Block Nesting Depth|FLOAT|0.0|Infinity|Weighted average of nesting depth.
CoreBiggestComponentCycleGroup=Biggest Component Cycle Group|INT|0.0|Infinity|Number of components in biggest cycle.
CoreBiggestCycleLoc=Maximum Lines of Code Involved in a Cycle|INT|0.0|Infinity|Biggest cycle group with respect to the lines of code of involved source files.
CoreCcd=CCD|INT|NaN|NaN|Cumulative component dependency according to John Lakos. Cumulated depends upon values.
CoreChanges2y=File Changes (2y)|INT|NaN|NaN|Number of committed file changes in the last 2 years
CoreChanges30=File Changes (30d)|INT|NaN|NaN|Number of committed file changes in the last 30 days
CoreChanges365=File Changes (365d)|INT|NaN|NaN|Number of committed file changes in the last 365 days
CoreChanges5y=File Changes (5y)|INT|NaN|NaN|Number of committed file changes in the last 5 years
CoreChanges90=File Changes (90d)|INT|NaN|NaN|Number of committed file changes in the last 90 days
CoreCodeChurn2y=Code Churn (2y)|INT|NaN|NaN|Number of lines added or removed in the last 2 years
CoreCodeChurn30=Code Churn (30d)|INT|NaN|NaN|Number of lines added or removed in the last 30 days
CoreCodeChurn365=Code Churn (365d)|INT|NaN|NaN|Number of lines added or removed in the last 365 days
CoreCodeChurn5y=Code Churn (5y)|INT|NaN|NaN|Number of lines added or removed in the last 5 years
CoreCodeChurn90=Code Churn (90d)|INT|NaN|NaN|Number of lines added or removed in the last 90 days
CoreCodeChurnRate2y=Code Churn Rate (2y)|FLOAT|NaN|NaN|Percentage of lines added or removed in the last 2 years based on total lines
CoreCodeChurnRate30=Code Churn Rate (30d)|FLOAT|NaN|NaN|Percentage of lines added or removed in the last 30 days based on total lines
CoreCodeChurnRate365=Code Churn Rate (365d)|FLOAT|NaN|NaN|Percentage of lines added or removed in the last 365 days based on total lines
CoreCodeChurnRate5y=Code Churn Rate (5y)|FLOAT|NaN|NaN|Percentage of lines added or removed in the last 5 years based on total lines
CoreCodeChurnRate90=Code Churn Rate (90d)|FLOAT|NaN|NaN|Percentage of lines added or removed in the last 90 days based on total lines
CoreCodeCommentLines=Code Comment Lines|INT|NaN|NaN|Counts all comment lines excluding header comments and blank comment lines. This includes code of fully analyzed and issue ignoring code.
CoreCommentLines=Comment Lines|INT|NaN|NaN|Counts all comment lines excluding blank comment lines. This includes fully analyzed and issue ignoring code.
CoreComponentCycleGroups=Number of Component Cycle Groups|INT|0.0|Infinity|Number of all component cycle groups, warnings and errors.
CoreComponentDependenciesToRemoveComponents=Component Dependencies to Remove (Components)|INT|0.0|Infinity|Number of component dependencies to remove to break up all  component cycles.
CoreComponents=Number of Components|INT|NaN|NaN|Number of components in fully analyzed and issue ignoring code.
CoreComponentsFullyAnalyzed=Number of Components (Full Analysis)|INT|NaN|NaN|Number of fully analyzed components.
CoreComponentsIgnoringIssues=Number of Components (Ignoring Issues)|INT|NaN|NaN|Number of components ignoring issues.
CoreComponentsInDeprecatedArtifacts=Number of Components in Deprecated Artifacts|INT|0.0|Infinity|Number of components that are assigned to deprecated artifact
CoreCriticalComponentCycleGroups=Number of Critical Component Cycle Groups|INT|0.0|Infinity|Number of component cycle groups marked as errors.
CoreCriticalEntangledLinesOfCode=Critically Entangled Lines of Code|INT|0.0|Infinity|Lines of code of source files involved any type of critical cycle (marked as error).
CoreCriticalEntangledLinesOfCodeIgnored=Critically Entangled Lines of Code [Ignored]|INT|0.0|Infinity|Lines of code of source files involved in any type of ignored critical cycle (marked as error).
CoreCriticalEntangledLinesOfCodePercent=Critically Entangled Lines of Code (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved any type of critical cycle (marked as error). This also represents the probability that any line is involved in critically entangled code.
CoreCriticalEntangledLinesOfCodePercentIgnored=Critically Entangled Lines of Code [Ignored] (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved in any type of ignored critical cycle (marked as error). This also represents the probability that any line is involved in ignored critically entangled code.
CoreCriticalEntangledLinesOfCodePercentToFix=Critically Entangled Lines of Code [To Be Fixed] (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved any type of to be fixed critical cycle (marked as error). This also represents the probability that any line is involved in to be fixed critically entangled code.
CoreCriticalEntangledLinesOfCodeToFix=Critically Entangled Lines of Code [To Be Fixed]|INT|0.0|Infinity|Lines of code of source files involved any type of to be fixed critical cycle (marked as error).
CoreCyclicComponents=Number of Cyclic Components|INT|0.0|Infinity|Number of cyclic components.
CoreCyclicModules=Number of Cyclic Modules|INT|0.0|Infinity|Number of cyclic modules.
CoreCyclicityComponents=Cyclicity (Components)|INT|0.0|Infinity|Cumulated cyclicity of component cycles.
CoreDeprecatedOrViolatingLinesOfCode=Lines of Code in Files with Violations or Deprecations (%)|FLOAT|0.0|Infinity|Lines of code contained in files with at least one violation or deprecation.This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreDeprecatedOrViolatingLinesOfCodePercent=Code Contained in Files with Violations or Deprecations (%)|FLOAT|0.0|100.0|Percentage of lines of code contained in files with at least one violation or deprecation.This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreDeprecatedParserDependencies=Deprecated parser dependencies|INT|0.0|Infinity|Number of deprecated parser dependencies
CoreDuplicatedLines=Number of Duplicated Code Lines|INT|0.0|Infinity|Number of duplicated lines in duplicated code blocks. The duplicated lines of each code block are calculated as the sum of involved occurrences excluding the largest, which is treated as the reference.
CoreDuplicates=Number of Code Duplicates|INT|0.0|Infinity|Number of duplicated code blocks.
CoreDuplicatesFixed=Number of Code Duplicates to be Fixed|INT|0.0|Infinity|Number of duplicated code blocks with applied Fix task.
CoreElementsInDeprecatedArtifacts=Number of Logical Elements in Deprecated Artifacts|INT|0.0|Infinity|Number of logical programming elements that are assigned to deprecated artifact
CoreEmptyArtifactCount=Number of Empty Artifacts|INT|0.0|Infinity|Number of architecture artifacts that are empty in checked files
CoreEntangledLinesOfCode=Entangled Lines of Code|INT|0.0|Infinity|Lines of code of source files involved any type of cycle.
CoreEntangledLinesOfCodeIgnored=Entangled Lines of Code [Ignored]|INT|0.0|Infinity|Lines of code of source files involved in any type of ignored cycle.
CoreEntangledLinesOfCodePercent=Entangled Lines of Code (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved in any type of cycle. This also represents the probability that any line is involved in entangled code.
CoreEntangledLinesOfCodePercentIgnored=Entangled Lines of Code [Ignored] (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved in any type of ignored cycle. This also represents the probability that any line is involved in ignored entangled code.
CoreEntangledLinesOfCodePercentToFix=Entangled Lines of Code [To Be Fixed] (%)|FLOAT|0.0|100.0|Percentage of fully analyzed code contained in source files involved any type of to be fixed cycle. This also represents the probability that any line is involved in to be fixed entangled code.
CoreEntangledLinesOfCodeToFix=Entangled Lines of Code [To Be Fixed]|INT|0.0|Infinity|Lines of code of source files involved any type of to be fixed cycle.
CoreIgnoredCyclicComponents=Number of Ignored Cyclic Components|INT|0.0|Infinity|Number of ignored cyclic components.
CoreIgnoredDeprecatedParserDependencies=Ignored Deprecated Parser Dependencies|INT|0.0|Infinity|Number of parser dependencies in ignored architecture deprecations
CoreIgnoredDuplicates=Number of Ignored Code Duplicates|INT|0.0|Infinity|Number of ignored duplicated code blocks.
CoreIgnoredViolationsParserDependencies=Number of Ignored Violations (Parser Dependencies)|INT|0.0|Infinity|Number of parser dependencies in ignored architecture violations
CoreIssueDensity=Issue Density|FLOAT|0.0|Infinity|Calculated as the number of unresolved issues (errors, warnings) * 1000, divided by source element count
CoreLinesOfCode=Lines of Code|INT|NaN|NaN|Lines of code excluding blank and comment lines. This includes fully analyzed and issue ignoring code.
CoreLinesOfCodeFullyAnalyzed=Lines of Fully Analyzed Code|INT|NaN|NaN|Lines of fully analyzed code excluding blank and comment lines.
CoreLinesOfCodeInLargeFiles=Lines of Fully Analyzed Code in Large Files|INT|0.0|Infinity|Lines of fully analyzed code excluding blank and comment lines in files violating the threshold (default 1000).
CoreLinesOfCodeInLargeFilesIgnored=Lines of Fully Analyzed Code in Large Files [Ignored]|INT|0.0|Infinity|Lines of fully analyzed code excluding blank and comment lines in ignored files violating the threshold (default 1000).
CoreLinesOfCodeInLargeFilesIgnoredPercent=Lines of Fully Analyzed Code in Large Files [Ignored] (%)|FLOAT|0.0|100.0|Percent of lines of fully analyzed code excluding blank and comment lines in ignored files violating the threshold (default 1000).
CoreLinesOfCodeInLargeFilesPercent=Lines of Fully Analyzed Code in Large Files (%)|FLOAT|0.0|100.0|Percent of lines of fully analyzed code excluding blank and comment lines in files violating the threshold (default 1000).
CoreLinesOfCodeInLargeFilesToFix=Lines of Fully Analyzed Code in Large Files [To Be Fixed]|INT|0.0|Infinity|Lines of fully analyzed code excluding blank and comment lines in to be fixed files violating the threshold (default 1000).
CoreLinesOfCodeInLargeFilesToFixPercent=Lines of Fully Analyzed Code in Large Files [To Be Fixed] (%)|FLOAT|0.0|100.0|Percent of lines of fully analyzed code excluding blank and comment lines in to be fixed files violating the threshold (default 1000).
CoreLinesOfCodeIssueIgnoring=Lines of Issue-Ignoring Code|INT|NaN|NaN|Lines of code excluding blank and comment lines for which only architecture violations and parsing problems are reported.
CoreMaintainabilityLevel=Maintainability Level|FLOAT|100.0|0.0|This metric estimates maintainability as a percentage. 100% is the best possible value. To do that it looks at the dependency structure between components (source files in most languages). Cyclic dependencies and low level classes with a lot of incomin...
CoreMaxAcd=Highest ACD|FLOAT|0.0|Infinity|Highest module ACD.
CoreModules=Number of Modules|INT|NaN|NaN|Number of modules.
CoreNccd=NCCD|FLOAT|0.0|Infinity|Normalized cumulative component dependency  according to John Lakos. The ratio between the cumulative component dependency and the cumulative component dependency of a balanced binary tree of the same size. A value greater than 1 indicates a more verti...
CoreNumberOfAuthors=Number of authors (365d)|INT|NaN|NaN|Number of developers who have worked on this item in the last year
CoreNumberOfAuthors2y=Number of authors (2y)|INT|NaN|NaN|Number of developers who have worked on this item in the last 2 years
CoreNumberOfAuthors30=Number of Authors (30d)|INT|NaN|NaN|Number of developers who have worked on this item in the last 30 days
CoreNumberOfAuthors5y=Number of authors (5y)|INT|NaN|NaN|Number of developers who have worked on this item in the last 5 years
CoreNumberOfAuthors90=Number of authors (90d)|INT|NaN|NaN|Number of developers who have worked on this item in the last 90 days
CoreParserDependenciesToRemoveComponents=Parser Dependencies to Remove (Components)|INT|0.0|Infinity|Number of code lines to change to break up all  component cycles.
CorePropagationCost=Propagation Cost|FLOAT|0.0|100.0|Propagation cost metric according to MacCormack, Rusnak and Baldwin. It describes the proportion of software files that are directly or indirectly linked to each other.
CoreRedundancy=Redundant Code (%)|FLOAT|0.0|100.0|Percentage of redundant code. This also represents the probability that any line is contained in a duplicate. This metric is calculated for fully analyzed code.
CoreRedundancyFixed=Redundant Code [To Be Fixed] (%)|FLOAT|0.0|100.0|Percentage of redundant code with an assigned "Fix" task. This also represents the probability that any line is contained in a to-be-fixed duplicate. This metric is calculated for fully analyzed code.
CoreRedundancyIgnored=Redundant Code [Ignored] (%)|FLOAT|0.0|100.0|Percentage of ignored redundant code. This also represents the probability that any line is contained in an ignored duplicate. This metric is calculated for fully analyzed code.
CoreRelativeCyclicityComponents=Relative Cyclicity (Components)|FLOAT|0.0|100.0|Relative component cyclicity in percent.
CoreRelativeEntanglement=Relative Entanglement (%)|FLOAT|0.0|100.0|Computed as the sum of relative cyclicities on component and namespace/directory levels, with each level contributing 50%. If the system contains several languages, the namespace/directory values per language are weighted against the lines of code cont...
CoreSourceElementCount=Source Element Count|INT|NaN|NaN|Number of programming elements (i.e. types, fields, methods, functions, ...) plus number of statements. This includes elements of fully analyzed and issue ignoring code.
CoreSourcefiles=Number of Source Files|INT|NaN|NaN|Number of source files in fully analyzed and issue ignoring code.
CoreSourcefilesExcluded=Number of Excluded Source Files|INT|NaN|NaN|Number of source files excluded via 'File Filter'. These files are completely excluded from the analysis and do not contribute to any metric.
CoreSourcefilesFullyAnalyzed=Number of Source Files (Full Analysis)|INT|NaN|NaN|Number of source files that are fully analyzed, i.e. not excluded by any workspace filter.
CoreSourcefilesIssueIgnore=Number of Source Files (Ignoring Issue)|INT|NaN|NaN|Number of source files excluded via 'Issue Filter' that no issues (except parser issues and architecture violations) are generated for.
CoreSourcefilesTest=Number of Source Files (Excluded)|INT|NaN|NaN|Number of source files in test code (excluded via 'Production Code Filter').
CoreStatements=Number of Statements|INT|NaN|NaN|Counts all statements. This includes statements of fully analyzed and issue ignoring code.
CoreStatementsComplexMethods=Number of Statements in Complex Methods|INT|0.0|Infinity|Counts all statements in fully analyzed code of too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsComplexMethodsIgnored=Number of Statements in Complex Methods [Ignored]|INT|0.0|Infinity|Counts all statements in fully analyzed code of ignored too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsComplexMethodsIgnoredPercent=Number of Statements in Complex Methods [Ignored] (%)|FLOAT|0.0|100.0|Percentage of statements in fully analyzed code in ignored too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsComplexMethodsPercent=Number of Statements in Complex Methods (%)|FLOAT|0.0|100.0|Percentage of statements in fully analyzed code in too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsComplexMethodsToFix=Number of Statements in Complex Methods [To Be Fixed]|INT|0.0|Infinity|Counts all statements in fully analyzed code of to be fixed too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsComplexMethodsToFixPercent=Number of Statements in Complex Methods [To Be Fixed] (%)|FLOAT|0.0|100.0|Percentage of statements in fully analyzed code in to be fixed too complex methods, i.e. that violate the thresholds for max nesting depth (default 4) or for extended modified cyclomatic complexity (default 15).
CoreStatementsFullyAnalyzed=Number of Statements in Fully Analyzed Code|INT|NaN|NaN|Counts all statements in fully analyzed code.
CoreStructuralDebtIndexComponents=Structural Debt Index (Components)|INT|0.0|Infinity|Cumulative structural debt index of component cycles.
CoreTotalLines=Total Lines|INT|NaN|NaN|Counts all lines including empty and comment lines of source files. This includes files of fully analyzed and issue ignoring code.
CoreTypes=Number of Types|INT|NaN|NaN|Number of types (classes, enums or similar) in container.
CoreUnassignedComponents=Number of Unassigned Physical Components|INT|0.0|Infinity|Number of internal physical components that are not assigned to any artifact
CoreUnassignedLinesOfCodePercent=Code Contained in Files Uncovered by Architecture (%)|FLOAT|0.0|100.0|Percentage of lines of code contained in files not assigned to any architecture artifact. This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreUnassignedLogicalElements=Number of Unassigned Logical Elements|INT|0.0|Infinity|Number of internal logical elements that are not assigned to any artifact
CoreViolatingComponents=Number of Components with Violations|INT|0.0|Infinity|Number of components that contain architecture violations
CoreViolatingLinesOfCode=Lines of Code in Files with Violations|FLOAT|0.0|Infinity|Lines of code contained in files with at least one violation. This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreViolatingLinesOfCodePercent=Code Contained in Files with Violations (%)|FLOAT|0.0|100.0|Percentage of lines of code contained in files with at least one violation. This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreViolationDensityLinesOfCode=Architecture Violation Density|FLOAT|0.0|100.0|Number of architecture violations per 1000 lines of code. This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreViolationDensitySourceElements=Architecture Violation Density (Source Elements)|FLOAT|0.0|100.0|Number of architecture violations per 1000 source elements. This metric is calculated for code that is fully analyzed plus code that is excluded by the 'Issue Filter'.
CoreViolationsComponentDependencies=Number of Violations (Component Dependencies)|INT|0.0|Infinity|Number of architecture-violating component dependencies
CoreViolationsParserDependencies=Number of Violations (Parser Dependencies)|INT|0.0|Infinity|Number of architecture-violating parser dependencies
CppBiggestDirectoryCycleGroup=Biggest C,C++ Directory Cycle Group|INT|0.0|Infinity|Biggest C,C++ directory cycle group.
CppBiggestNamespaceCycleGroup=Biggest C++ Namespace Cycle Group|INT|0.0|Infinity|Biggest C++ namespace cycle group
CppComponentDependenciesToRemoveDirectories=Component Dependencies to Remove (C,C++ Directories)|INT|0.0|Infinity|Number of component dependencies to remove to break up all C,C++ directory cycle groups.
CppComponentDependenciesToRemoveNamespaces=Component Dependencies to Remove (C++ Namespaces)|INT|0.0|Infinity|Number of component dependencies to remove to break up all C++ namespace cycle groups.
CppCriticalDirectoryCycleGroups=Number of Critical C,C++ Directory Cycle Groups|INT|0.0|Infinity|Number of C,C++ directory cycle groups marked as errors.
CppCriticalNamespaceCycleGroups=Number of Critical C++ Namespace Cycle Groups|INT|0.0|Infinity|Number of C++ namespace cycle groups marked as errors.
CppCyclicDirectories=Number of Cyclic C,C++ Directories|INT|0.0|Infinity|Number of cyclic C,C++ directories.
CppCyclicNamespaces=Number of Cyclic C++ Namespaces|INT|0.0|Infinity|Number of cyclic C++ namespaces.
CppCyclicityDirectories=Cyclicity (C,C++ Directories)|INT|0.0|Infinity|Cumulated cyclicity of C,C++ directory cycle groups.
CppCyclicityNamespaces=Cyclicity (C++ Namespaces)|INT|0.0|Infinity|Cumulated cyclicity of C++ namespace cycle groups.
CppDirectories=Number of C,C++ Directories|INT|NaN|NaN|Number of C,C++ directories containing components in fully analyzed and issue ignoring code.
CppDirectoriesFullyAnlayzed=Number of C,C++ Directories (Full Analysis)|INT|NaN|NaN|Number of C,C++ directories containing fully analyzed components.
CppDirectoryCycleGroups=Number of all C,C++ Directory Cycle Groups|INT|0.0|Infinity|Number of all C,C++ directory cycle groups, errors and warnings.
CppIgnoredCyclicDirectories=Number of Ignored Cyclic C,C++ Directories|INT|0.0|Infinity|Number of ignored cyclic C,C++ directories.
CppIgnoredCyclicNamespaces=Number of Ignored Cyclic C++ Namespaces|INT|0.0|Infinity|Number of ignored cyclic C++ namespaces.
CppNamespaceCycleGroups=Number of all C++ Namespace Cycle Groups|INT|0.0|Infinity|Number of all C++ namespace cycle groups, errors and warnings.
CppNamespaces=Number of C++ Namespaces|INT|NaN|NaN|Number of C++ namespaces containing types in fully analyzed and issue ignoring code.
CppNamespacesFullyAnalyzed=Number of C++ Namespaces (Full Analysis)|INT|NaN|NaN|Number of C++ namespaces containing fully analyzed types.
CppParserDependenciesToRemoveDirectories=Parser Dependencies to Remove (C,C++ Directories)|INT|0.0|Infinity|Number of code lines to change to break up all C,C++ directory cycle groups.
CppParserDependenciesToRemoveNamespaces=Parser Dependencies to Remove (C++ Namespaces)|INT|0.0|Infinity|Number of code lines to change to break up all C++ namespace cycle groups.
CppRelativeCyclicityDirectories=Relative Cyclicity (C,C++ Directories)|FLOAT|0.0|100.0|Relative C,C++ directory cyclicity in percent.
CppRelativeCyclicityNamespaces=Relative Cyclicity (C++ Namespaces)|FLOAT|0.0|100.0|Relative C++ namespace cyclicity in percent.
CppStructuralDebtIndexDirectories=Structural Debt Index (C,C++ Directories)|INT|0.0|Infinity|Cumulative structural debt index of all C,C++ directory cycle groups.
CppStructuralDebtIndexNamespaces=Structural Debt Index (C++ Namespaces)|INT|0.0|Infinity|Cumulative structural debt index of all C++ namespace cycle groups.
CsBiggestDirectoryCycleGroup=Biggest C\# Directory Cycle Group|INT|0.0|Infinity|Biggest C\# directory cycle group.
CsBiggestNamespaceCycleGroup=Biggest C\# Namespace Cycle Group|INT|0.0|Infinity|Biggest C\# namespace cycle group.
CsComponentDependenciesToRemoveDirectories=Component Dependencies to Remove (C\# Directories)|INT|0.0|Infinity|Number of component dependencies to remove to break up all C\# directory cycle groups.
CsComponentDependenciesToRemoveNamespaces=Component Dependencies to Remove (C\# Namespaces)|INT|0.0|Infinity|Number of component dependencies to remove to break up all C\# namespace cycle groups.
CsCriticalDirectoryCycleGroups=Number of Critical C\# Directory Cycle Groups|INT|0.0|Infinity|Number of C\# directory cycle groups marked as errors.
CsCriticalNamespaceCycleGroups=Number of Critical C\# Namespace Cycle Groups|INT|0.0|Infinity|Number of C\# namespace cycle groups marked as errors.
CsCyclicDirectories=Number of Cyclic C\# Directories|INT|0.0|Infinity|Number of cyclic C\# directories.
CsCyclicNamespaces=Number of Cyclic C\# Namespaces|INT|0.0|Infinity|Number of cyclic C\# namespaces.
CsCyclicityDirectories=Cyclicity (C\# Directories)|INT|0.0|Infinity|Cumulated cyclicity of C\# directory cycle groups.
CsCyclicityNamespaces=Cyclicity (C\# Namespaces)|INT|0.0|Infinity|Cumulated cyclicity of C\# namespace cycle groups.
CsDirectories=Number of C\# Directories|INT|NaN|NaN|Number of C\# directories containing components in fully analyzed and issue ignoring code.
CsDirectoriesFullyAnalyzed=Number of C\# Directories (Full Analysis)|INT|NaN|NaN|Number of C\# directories containing fully analyzed components.
CsDirectoryCycleGroups=Number of all C\# Directory Cycle Groups|INT|0.0|Infinity|Number of all C\# directory cycle groups, errors and warnings.
CsIgnoredCyclicDirectories=Number of Ignored Cyclic C\# Directories|INT|0.0|Infinity|Number of ignored cyclic C\# directories.
CsIgnoredCyclicNamespaces=Number of Ignored Cyclic C\# Namespaces|INT|0.0|Infinity|Number of ignored cyclic C\# namespaces.
CsNamespaceCycleGroups=Number of all C\# Namespace Cycle Groups|INT|0.0|Infinity|Number of C\# namespace cycle groups, errors and warnings.
CsNamespaces=Number of C\# Namespaces|INT|NaN|NaN|Number of C\# namespaces containing types in fully analyzed and issue ignoring code.
CsNamespacesFullyAnalyzed=Number of C\# Namespaces (Full Analysis)|INT|NaN|NaN|Number of C\# namespaces containing fully analyzed types.
CsParserDependenciesToRemoveDirectories=Parser Dependencies to Remove (C\# Directories)|INT|0.0|Infinity|Number of code lines to change to break up all C\# directory cycle groups.
CsParserDependenciesToRemoveNamespaces=Parser Dependencies to Remove (C\# Namespaces)|INT|0.0|Infinity|Number of code lines to change to break up all C\# namespace cycle groups.
CsRelativeCyclicityDirectories=Relative Cyclicity (C\# Directories)|FLOAT|0.0|100.0|Relative C\# directory cyclicity in percent.
CsRelativeCyclicityNamespaces=Relative Cyclicity (C\# Namespaces)|FLOAT|0.0|100.0|Relative C\# namespace cyclicity in percent.
CsStructuralDebtIndexDirectories=Structural Debt Index (C\# Directories)|INT|0.0|Infinity|Cumulative structural debt index of all C\# directory cycle groups.
CsStructuralDebtIndexNamespaces=Structural Debt Index (C\# Namespaces)|INT|0.0|Infinity|Cumulative structural debt index of all C\# namespace cycle groups.
JavaAveragePackagePublicVisibility=Average Java Public Visibility (%)|FLOAT|0.0|100.0|Average of Java public visibility for all Java packages in a Java module
JavaBiggestPackageCycleGroup=Biggest Java Package Cycle Group|INT|0.0|Infinity|Biggest Java package cycle group.
JavaByteCodeInstructions=Byte Code Instructions|INT|NaN|NaN|Number of Java byte code instructions.
JavaComponentDependenciesToRemovePackages=Component Dependencies to Remove (Java Packages)|INT|0.0|Infinity|Number of component dependencies to remove to break up all Java package cycle groups.
JavaCriticalPackageCycleGroups=Number of Critical Java Package Cycle Groups|INT|0.0|Infinity|Number of Java package cycle groups marked as errors.
JavaCyclicPackages=Number of Cyclic Java Packages|INT|0.0|Infinity|Number of cyclic Java packages.
JavaCyclicityPackages=Cyclicity (Java Packages)|INT|0.0|Infinity|Cumulated cyclicity of Java package cycle groups.
JavaIgnoredCyclicPackages=Number of Ignored Cyclic Java Packages|INT|0.0|Infinity|Number of ignored cyclic Java packages.
JavaPackageCycleGroups=Number of all Java Package Cycle Groups|INT|0.0|Infinity|Number of all Java package cycle groups, errors and warnings
JavaPackages=Number of Java Packages|INT|NaN|NaN|Number of Java packages containing types in fully analyzed and issue ignoring code.
JavaPackagesFullyAnalyzed=Number of Java Packages (Full Analysis)|INT|NaN|NaN|Number of Java packages containing fully analyzed types.
JavaParserDependenciesToRemovePackages=Parser Dependencies to Remove (Java Packages)|INT|0.0|Infinity|Number of code lines to change to break up all Java package cycle groups).
JavaRelativeCyclicityPackages=Relative Cyclicity (Java Packages)|FLOAT|0.0|100.0|Relative Java package cyclicity in percent.
JavaStructuralDebtIndexPackages=Structural Debt Index (Java Packages)|INT|0.0|Infinity|Cumulative structural debt index of all Java package cycle groups.
PythonBiggestPackageCycleGroup=Biggest Python Package Cycle Group|INT|0.0|Infinity|Biggest Python package cycle group.
PythonComponentDependenciesToRemovePackages=Component Dependencies to Remove (Python Packages)|INT|0.0|Infinity|Number of component dependencies to remove to break up all Python package cycle groups.
PythonCriticalPackageCycleGroups=Number of Critical Python Package Cycle Groups|INT|0.0|Infinity|Number of Python package cycle groups marked as errors.
PythonCyclicPackages=Number of Cyclic Python Packages|INT|0.0|Infinity|Number of cyclic Python packages.
PythonCyclicityPackages=Cyclicity (Python Packages)|INT|0.0|Infinity|Cumulated cyclicity of Python package cycle groups.
PythonIgnoredCyclicPackages=Number of Ignored Cyclic Python Packages|INT|0.0|Infinity|Number of ignored cyclic Python packages.
PythonPackageCycleGroups=Number of all Python Package Cycle Groups|INT|0.0|Infinity|Number of all Python package cycle groups, errors and warnmings.
PythonPackages=Number of Python Packages|INT|NaN|NaN|Number of Python packages containing types in fully analyzed and issue ignoring code.
PythonPackagesFullyAnalyzed=Number of Python Packages (Full Analysis)|INT|NaN|NaN|Number of Python packages containing fully analyzed types.
PythonParserDependenciesToRemovePackages=Parser Dependencies to Remove (Python Packages)|INT|0.0|Infinity|Number of code lines to change to break up all Python package cycle groups.
PythonRelativeCyclicityPackages=Relative Cyclicity (Python Packages)|FLOAT|0.0|100.0|Relative Python package cyclicity in percent.
PythonStructuralDebtIndexPackages=Structural Debt Index (Python Packages)|INT|0.0|Infinity|Cumulative structural debt index of all Python package cycle groups.
